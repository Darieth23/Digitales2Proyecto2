$date
	Tue Jun 16 22:27:40 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module BancoPruebas $end
$var wire 1 ! reset_L $end
$var wire 10 " datain_class [9:0] $end
$var wire 10 # data_mux_1 [9:0] $end
$var wire 10 $ data_mux_0 [9:0] $end
$var wire 1 % clk $end
$scope module clasificacion $end
$var wire 4 & aeVC_o [3:0] $end
$var wire 4 ' afVC_o [3:0] $end
$var wire 1 ( pop_vc0 $end
$var wire 1 ) pop_vc1 $end
$var wire 1 * push_vc0 $end
$var wire 1 + push_vc1 $end
$var wire 1 ! reset_L $end
$var wire 10 , outclass1 [9:0] $end
$var wire 10 - outclass0 [9:0] $end
$var wire 1 . fifo_pause_vc1 $end
$var wire 1 / fifo_pause_vc0 $end
$var wire 1 0 fifo_error_vc1 $end
$var wire 1 1 fifo_error_vc0 $end
$var wire 1 2 fifo_empty_vc1 $end
$var wire 1 3 fifo_empty_vc0 $end
$var wire 10 4 datain_class [9:0] $end
$var wire 10 5 data_mux_1 [9:0] $end
$var wire 10 6 data_mux_0 [9:0] $end
$var wire 1 % clk $end
$scope module instDemux $end
$var wire 1 ! reset_L $end
$var wire 10 7 datain_class [9:0] $end
$var wire 1 % clk $end
$var reg 10 8 data_reg0 [9:0] $end
$var reg 10 9 data_reg1 [9:0] $end
$var reg 10 : outclass0 [9:0] $end
$var reg 10 ; outclass1 [9:0] $end
$upscope $end
$scope module instFifo0 $end
$var wire 4 < aeVC_o [3:0] $end
$var wire 4 = afVC_o [3:0] $end
$var wire 6 > data_vc0 [5:0] $end
$var wire 1 ( pop_vc0 $end
$var wire 1 * push_vc0 $end
$var wire 1 ! reset_L $end
$var wire 6 ? data_mux_0 [5:0] $end
$var wire 1 % clk $end
$var reg 1 @ almost_empty $end
$var reg 1 A almost_full $end
$var reg 6 B data_count [5:0] $end
$var reg 1 C datamod $end
$var reg 1 3 fifo_empty_vc0 $end
$var reg 1 1 fifo_error_vc0 $end
$var reg 1 D fifo_full $end
$var reg 1 / fifo_pause_vc0 $end
$var reg 4 E rd_ptr [3:0] $end
$var reg 4 F wr_ptr [3:0] $end
$scope module mem_vc0 $end
$var wire 6 G data_in [5:0] $end
$var wire 4 H rd_ptr [3:0] $end
$var wire 1 ( read $end
$var wire 4 I wr_ptr [3:0] $end
$var wire 1 * write $end
$var wire 1 ! reset_L $end
$var wire 1 % clk $end
$var reg 6 J data_out [5:0] $end
$upscope $end
$upscope $end
$scope module instFifo1 $end
$var wire 4 K aeVC_o [3:0] $end
$var wire 4 L afVC_o [3:0] $end
$var wire 6 M data_vc1 [5:0] $end
$var wire 1 ) pop_vc1 $end
$var wire 1 + push_vc1 $end
$var wire 1 ! reset_L $end
$var wire 6 N data_mux_1 [5:0] $end
$var wire 1 % clk $end
$var reg 1 O almost_empty $end
$var reg 1 P almost_full $end
$var reg 6 Q data_count [5:0] $end
$var reg 1 R datamod $end
$var reg 1 2 fifo_empty_vc1 $end
$var reg 1 0 fifo_error_vc1 $end
$var reg 1 S fifo_full $end
$var reg 1 . fifo_pause_vc1 $end
$var reg 4 T rd_ptr [3:0] $end
$var reg 4 U wr_ptr [3:0] $end
$scope module mem_vc1 $end
$var wire 6 V data_in [5:0] $end
$var wire 4 W rd_ptr [3:0] $end
$var wire 1 ) read $end
$var wire 4 X wr_ptr [3:0] $end
$var wire 1 + write $end
$var wire 1 ! reset_L $end
$var wire 1 % clk $end
$var reg 6 Y data_out [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module probador $end
$var wire 10 Z data_mux_0 [9:0] $end
$var wire 10 [ data_mux_1 [9:0] $end
$var reg 1 % clk $end
$var reg 10 \ datain_class [9:0] $end
$var reg 1 ! reset_L $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 \
b0xxxxxx [
b0xxxxxx Z
bx Y
bx X
bx W
b0 V
bx U
bx T
0S
0R
bx Q
0P
0O
bx N
b0 M
bz L
bz K
bx J
bx I
bx H
b0 G
bx F
bx E
0D
0C
bx B
0A
0@
bx ?
b0 >
bz =
bz <
b0 ;
b0 :
bx 9
bx 8
b0 7
b0xxxxxx 6
b0xxxxxx 5
b0 4
13
12
01
00
0/
0.
b0 -
b0 ,
z+
z*
z)
z(
bz '
bz &
0%
b0xxxxxx $
b0xxxxxx #
b0 "
0!
$end
#100000
13
12
1!
b0 9
b0 8
b0 E
b0 H
b0 F
b0 I
b0 B
b0 T
b0 W
b0 U
b0 X
b0 Q
1%
#200000
0%
#300000
b10010 M
b10010 V
b1100010010 ,
b1100010010 ;
b1100010010 "
b1100010010 4
b1100010010 7
b1100010010 \
1%
#400000
0%
#500000
b110101 M
b110101 V
b1010110101 ,
b1010110101 ;
b1010110101 "
b1010110101 4
b1010110101 7
b1010110101 \
b1100010010 9
1%
#600000
0%
#700000
b10010 >
b10010 G
b1010010 -
b1010010 :
b1010110101 ,
b1010110101 ;
b1010110101 9
b1010010 "
b1010010 4
b1010010 7
b1010010 \
1%
#800000
0%
#900000
b111 >
b111 G
b1010110101 ,
b1010110101 ;
b111000111 -
b111000111 :
b111000111 "
b111000111 4
b111000111 7
b111000111 \
b1010010 8
1%
#1000000
0%
#1100000
b100010 M
b100010 V
b1000100010 ,
b1000100010 ;
b111000111 -
b111000111 :
b111000111 8
b1000100010 "
b1000100010 4
b1000100010 7
b1000100010 \
1%
#1200000
0%
#1300000
b101 >
b101 G
b1000100010 ,
b1000100010 ;
b110000101 -
b110000101 :
b110000101 "
b110000101 4
b110000101 7
b110000101 \
b1000100010 9
1%
#1400000
0%
#1500000
b1010 >
b1010 G
b1000100010 ,
b1000100010 ;
b111001010 -
b111001010 :
b110000101 8
b111001010 "
b111001010 4
b111001010 7
b111001010 \
1%
#1600000
0%
#1700000
b1000100010 ,
b1000100010 ;
b111001010 -
b111001010 :
b111001010 8
1%
#1800000
0%
#1900000
1%
